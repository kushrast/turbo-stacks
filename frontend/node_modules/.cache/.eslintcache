[{"/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/index.js":"1","/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/App.js":"2","/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/reportWebVitals.js":"3","/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/Header.jsx":"4","/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/InstaList.jsx":"5","/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/api/Storage.js":"6","/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/MainPageNavigation.jsx":"7"},{"size":500,"mtime":1633847717655,"results":"8","hashOfConfig":"9"},{"size":1255,"mtime":1633926542742,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1632789641274,"results":"11","hashOfConfig":"9"},{"size":1299,"mtime":1633927365454,"results":"12","hashOfConfig":"9"},{"size":9736,"mtime":1633898805535,"results":"13","hashOfConfig":"9"},{"size":1520,"mtime":1633859339772,"results":"14","hashOfConfig":"9"},{"size":1379,"mtime":1633845927527,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"zfn8wx",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/index.js",[],["35","36"],"/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/App.js",["37","38","39","40"],"import Header from './Header.jsx';\nimport MainPageNavigation from './MainPageNavigation.jsx';\nimport InstaList, {InstaListForm} from './InstaList.jsx';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\nimport React from 'react';\nimport Typed from \"typed.js\";\n\nimport 'bulma/css/bulma.min.css';\nimport './App.css';\nimport logo from './logo.svg';\n\nexport default function App() {\n  return (\n  <Router>\n    <div className=\"App\">\n      <section class=\"section\">\n        <div class=\"container\">\n          <Header/>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/instalist\">\n              <InstaListRouter/>\n            </Route>\n            <Route exact path=\"/\">\n              <MainPageNavigation/>\n            </Route>\n          </Switch>\n        </div>\n      </section>\n    </div>\n  </Router>);\n}\n\nfunction InstaListRouter() {\n  let { url } = useRouteMatch();\n  return (\n    <Switch>\n      <Route path={`${url}/new_list`}>\n        <InstaListForm/>\n      </Route>\n      <Route path={`${url}/:id`}>\n        <InstaList/>\n      </Route>\n    </Switch>\n    );\n}","/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/reportWebVitals.js",[],"/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/Header.jsx",[],"/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/InstaList.jsx",["41","42","43","44","45"],"import FadeIn from 'react-fade-in';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faTrash, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport {sortableContainer, sortableElement} from 'react-sortable-hoc';\nimport {arrayMoveImmutable} from 'array-move';\nimport { withRouter } from \"react-router\";\n\nimport {createNewInstaList, getInstaList} from './api/Storage.js';\n\nimport React from 'react';\n\nclass ListTitle extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n        <div class=\"list-header columns is-centered\">\n          <div class=\"column is-7 field is-grouped\">\n            <input class=\"input list-title-input underline\" ref=\"input\" defaultValue={this.props.value} onChange={this.props.updateTitle}/>\n            <p class=\"buttons\">\n            {\n              this.props.numItems > 0 ?\n              <button class=\"button is-success is-medium is-light\"  onClick={this.props.saveList}>\n                <span class=\"icon\">\n                  <FontAwesomeIcon icon={faCheck} size=\"xs\"/>\n                </span>\n              </button>\n              :\n              <button class=\"button is-medium is-light\" disabled>\n                <span class=\"icon\">\n                  <FontAwesomeIcon icon={faCheck} size=\"xs\"/>\n                </span>\n              </button>\n            }\n            </p>\n          </div>\n        </div>\n      );\n  }\n}\n\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: this.props.value\n    }\n  }\n\n  getPlaceholder = () => {\n    if (this.props.newListItem) {\n      return \"Add new item\";\n    } \n    return \"Enter a value\";\n  }\n\n  getDefaultValue = () => {\n    if (this.props.newListItem) {\n      return \"\";\n    } \n    return this.state.value;\n  }\n\n  getDefaultValue = () => {\n    if (this.props.newListItem) {\n      return \"\";\n    } \n    return this.state.value;\n  }\n\n  updateInputValue = (inputElem) => {\n    this.setState({value: inputElem.target.value});\n  }\n\n  onSubmit = () => {\n    this.refs.input.blur();\n    this.props.onEnter(this.props.index, this.state.value);\n    if (this.props.newListItem) {\n      this.setState({value: \"\"});\n    }\n  }\n\n  onKeyDown = (event) => {\n    if (event.key===\"Enter\") {\n      this.onSubmit();\n    }\n  }\n\n  render() {\n    return (\n  <div class=\"columns is-centered\">\n    <div class=\"column is-7\">\n      <div class=\"card\">\n        <div class=\"card-content list-card\">\n          <div class=\"content\">\n            <div class=\"field is-grouped list-item-number\">\n              <p class=\"control list-item is-expanded\">\n                <input class=\"input list-item-input underline\" ref=\"input\" placeholder={this.getPlaceholder()} type=\"text\" value={this.state.value} onChange={this.updateInputValue} onKeyDown={this.onKeyDown}/>\n              </p>\n              { this.props.newListItem ?\n                <p></p> :\n              <p class=\"buttons\">\n                <button class=\"button is-ghost is-medium\" onClick={() => {this.props.onDelete(this.props.index)}}>\n                  <span class=\"icon\">\n                    <FontAwesomeIcon icon={faTimesCircle} size=\"xs\"/>\n                  </span>\n                </button>\n              </p>\n            }\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n      );\n  }\n}\n\nconst SortableListItem = sortableElement(({value, onEnter, sortIndex, onDelete}) => (\n  <li class=\"list-item-container\">\n    <ListItem value={value} onEnter={onEnter} index={sortIndex} onDelete={onDelete}/>\n  </li>\n));\n\nconst SortableListContainer = sortableContainer(({children}) => {\n  return (\n    <ul>{children}</ul>\n  );\n});\n\nclass ListControls extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div class=\"columns is-centered\">\n        <div class=\"column is-7\">\n        { !this.props.isToggled ? \n          <button class=\"button is-info is-light\" onClick={this.props.toggleList}>Toggle</button>\n          :\n          <button class=\"button is-info\" onClick={this.props.toggleList}>Untoggle</button>\n        }\n        <button class={!this.props.persist ? \"button is-danger is-light\" : \"button is-primary is-light\"} style={{marginLeft: \"10px\"}} onClick={this.props.togglePersist}>\n          { !this.props.persist ? \n            <span> Don't persist </span> :\n            <span> Persist </span>\n          }\n        </button>\n        </div>\n      </div>\n      );\n  }\n}\n\nclass BaseInstaList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showAll: true,\n    }\n  }\n\n  toggleList = () => {\n    this.setState({showAll: !this.state.showAll});\n  }\n\n  render() {\n    return (\n      <div>\n          <ListTitle value={this.props.title}  numItems={this.props.items.length} saveList={this.props.saveList} updateTitle={this.props.updateTitle} />\n          <ListControls toggleList={this.toggleList} isToggled={!this.state.showAll} togglePersist={this.props.togglePersist} persist={this.props.persist}/>\n          <SortableListContainer onSortEnd={this.props.onSortEnd} distance={1}>\n          {\n            this.state.showAll ?\n            (this.props.items.map((item, i) => (\n                <SortableListItem\n                  key={item}\n                  value={item}\n                  index={i}\n                  sortIndex={i}\n                  onDelete={this.props.onDelete}\n                  onEnter={this.props.onEnter}/>)))\n            :\n            (this.props.items.length > 0 ? \n              <SortableListItem\n                  key={this.props.items[0]}\n                  value={this.props.items[0]}\n                  index={0}\n                  onDelete={this.props.onDelete}\n                  onEnter={this.props.onEnter}/>\n              :\n              <div></div>)\n          }\n          </SortableListContainer>\n          {\n            this.state.showAll ? \n            <ListItem newListItem={true} onEnter={this.props.addNewItem}/>\n            :\n            <div>\n              {this.props.items.length == 0 ? \n                <span>\n                  <div class=\"columns is-centered\">\n                    <div class=\"column is-7 has-text-centered\" style={{fontStyle:\"italic\", color: \"grey\"}}>\n                      No items in list\n                    </div>\n                  </div>\n                </span>: \n                <span></span>}\n            </div>\n          }\n      </div>\n      );\n  }\n}\n\nclass InstaList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    var savedListData = getInstaList(props.match.params.id);\n\n    this.state = {\n      persist: savedListData.persist,\n      items: savedListData.items,\n      title: savedListData.title\n    }\n  }\n\n  onSortEnd = ({oldIndex, newIndex}) => {\n    this.setState(({items}) => ({\n      items: arrayMoveImmutable(items, oldIndex, newIndex),\n    }));\n  };\n\n  addNewItem = (ignored, newValue) => {\n    this.setState({items: [...this.state.items, newValue]});\n  }\n\n  updateTitle = (titleUpdateEvent) => {\n    this.setState({title: titleUpdateEvent.target.value});\n  }\n\n  saveList = () => {\n    var newListId = createNewInstaList(this.state.title, this.state.items);\n\n    this.props.history.push(\"/instalist/\" + newListId);\n  }\n\n  onDelete = (index) => {\n    var newItemsList = this.state.items;\n    newItemsList.splice(index, 1);\n    this.setState({items: newItemsList});\n  }\n\n  togglePersist = () => {\n    this.setState({persist: !this.state.persist});\n  }\n\n  onEnter = (index, updatedItemValue) => {\n    if (this.state.items.length > index) {\n      var items = this.state.items;\n      items[index] = updatedItemValue;\n      this.setState({items: items})\n    }\n  }\n\n  render() {\n    return (\n      <BaseInstaList title={this.state.title} items={this.state.items} saveList={this.saveList} updateTitle={this.updateTitle} toggleList={this.toggleList} onSortEnd={this.onSortEnd} onDelete={this.onDelete} addNewItem={this.addNewItem} persist={this.state.persist} togglePersist={this.togglePersist} onEnter={this.onEnter}/>\n      );\n  }\n}\n\nclass InstaListFormTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      persist: false,\n      items: [],\n      title: \"New Title\"\n    }\n  }\n\n  onSortEnd = ({oldIndex, newIndex}) => {\n    this.setState(({items}) => ({\n      items: arrayMoveImmutable(items, oldIndex, newIndex),\n    }));\n  };\n\n  addNewItem = (ignored, newValue) => {\n    this.setState({items: [...this.state.items, newValue]});\n  }\n\n  updateTitle = (titleUpdateEvent) => {\n    this.setState({title: titleUpdateEvent.target.value});\n  }\n\n  saveList = () => {\n    var newListId = createNewInstaList(this.state.title, this.state.items, this.state.persist);\n\n    this.props.history.push(\"/instalist/\" + newListId);\n  }\n\n  onDelete = (index) => {\n    var newItemsList = this.state.items;\n    newItemsList.splice(index, 1);\n    this.setState({items: newItemsList});\n  }\n\n  togglePersist = () => {\n    this.setState({persist: !this.state.persist});\n  }\n\n  onEnter = (index, updatedItemValue) => {\n    if (this.state.items.length > index) {\n      var items = this.state.items;\n      items[index] = updatedItemValue;\n      this.setState({items: items})\n    }\n  }\n\n  render() {\n    return (\n      <BaseInstaList title={this.state.title} items={this.state.items} saveList={this.saveList} updateTitle={this.updateTitle} toggleList={this.toggleList} onSortEnd={this.onSortEnd} onDelete={this.onDelete} addNewItem={this.addNewItem}  persist={this.state.persist} togglePersist={this.togglePersist} onEnter={this.onEnter}/>\n      );\n  }\n}\n\nexport default withRouter(InstaList);\nexport const InstaListForm = withRouter(InstaListFormTemplate);\n","/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/api/Storage.js",["46"],"import { v4 as uuidv4 } from 'uuid';\n\nclass StorageClient {\n\tconstructor(){}\n\tcreateNewInstaList(title, listItems, persist){}\n\tgetInstaList(listId){}\n}\n\nclass LocalStorageClient extends StorageClient {\n\tgetLocalStorage = () => {\n\t\tif (typeof(Storage) !== \"undefined\") {\n\t\t  return window.localStorage;\n\t\t} else {\n\t\t  return null;\n\t\t}\n\t}\n\n\tcreateNewInstaList = (title, listItems, persist) => {\n\t\tvar storage = this.getLocalStorage();\n\t\tif (storage != null) {\n\t\t\tvar listId = uuidv4();\n\t\t\tvar creationTimestampMs = new Date().getTime();\n\n\t\t\tvar currentLists;\n\t\t\tvar currentListsAsString = storage.getItem(\"lists\");\n\n\t\t\tif (currentListsAsString == null) {\n\t\t\t\tcurrentLists = {};\n\t\t\t} else {\n\t\t\t\tcurrentLists = JSON.parse(currentListsAsString);\n\t\t\t}\n\n\t\t\tcurrentLists[listId] = {\"title\": title, \"items\": listItems, \"creationTimestampMs\": creationTimestampMs, \"persist\": persist}\n\n\t\t\tstorage.setItem(\"lists\", JSON.stringify(currentLists));\n\n\t\t\treturn listId;\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tgetInstaList = (listId) => {\n\t\tvar storage = this.getLocalStorage();\n\t\tif (storage != null) {\n\t\t\tvar currentLists;\n\t\t\tvar currentListsAsString = storage.getItem(\"lists\");\n\n\t\t\tif (currentListsAsString == null) {\n\t\t\t\tcurrentLists = {};\n\t\t\t} else {\n\t\t\t\tcurrentLists = JSON.parse(currentListsAsString);\n\t\t\t}\n\n\t\t\treturn currentLists[listId];\n\t\t}\n\t\treturn {};\n\t}\n}\n\nvar localStorageClient = new LocalStorageClient();\n\nexport const createNewInstaList = localStorageClient.createNewInstaList;\nexport const getInstaList = localStorageClient.getInstaList;","/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/MainPageNavigation.jsx",["47"],"import React from 'react';\n\n\nclass MainPageNavigation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n\n  render () {\n    return (\n      <div>\n        <div class=\"columns is-centered\" style={{marginTop: \"35px\"}}>\n          <div class=\"column is-7 columns\">\n            <div class=\"column is-6\">\n              <div class=\"card\">\n                <header class=\"card-header\">\n                  <p class=\"card-header-title\">\n                    InstaList\n                  </p>\n                  <button class=\"card-header-icon\" aria-label=\"more options\">\n                    <span class=\"icon\">\n                      <i class=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\n                    </span>\n                  </button>\n                </header>\n                <div class=\"card-content\">\n                  <div class=\"content\">\n                    <div>\n                      <a class=\"button is-light is-fullwidth\" href=\"/instalist/new_list\">New InstaList</a>\n                    </div>\n                    <div style={{marginTop: \"8px\"}}>\n                      <a class=\"button is-light is-fullwidth\">View All</a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      );\n  }\n}\n\nexport default MainPageNavigation;",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":9,"column":3,"nodeType":"54","messageId":"55","endLine":9,"endColumn":7},{"ruleId":"52","severity":1,"message":"56","line":10,"column":3,"nodeType":"54","messageId":"55","endLine":10,"endColumn":12},{"ruleId":"52","severity":1,"message":"57","line":14,"column":8,"nodeType":"54","messageId":"55","endLine":14,"endColumn":13},{"ruleId":"52","severity":1,"message":"58","line":18,"column":8,"nodeType":"54","messageId":"55","endLine":18,"endColumn":12},{"ruleId":"52","severity":1,"message":"59","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":14},{"ruleId":"52","severity":1,"message":"60","line":4,"column":19,"nodeType":"54","messageId":"55","endLine":4,"endColumn":26},{"ruleId":"61","severity":1,"message":"62","line":14,"column":3,"nodeType":"63","messageId":"64","endLine":16,"endColumn":4},{"ruleId":"61","severity":1,"message":"62","line":137,"column":3,"nodeType":"63","messageId":"64","endLine":139,"endColumn":4},{"ruleId":"65","severity":1,"message":"66","line":208,"column":40,"nodeType":"67","messageId":"68","endLine":208,"endColumn":42},{"ruleId":"61","severity":1,"message":"62","line":4,"column":2,"nodeType":"63","messageId":"64","endLine":4,"endColumn":17},{"ruleId":"69","severity":1,"message":"70","line":35,"column":23,"nodeType":"71","endLine":35,"endColumn":63},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'Typed' is defined but never used.","'logo' is defined but never used.","'FadeIn' is defined but never used.","'faTrash' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]