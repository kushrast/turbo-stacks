{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\n\nclass StorageClient {\n  constructor() {}\n\n  createNewInstaList(title, listItems, persist) {}\n\n  getInstaList(listId) {}\n\n}\n\nclass LocalStorageClient extends StorageClient {\n  constructor(...args) {\n    super(...args);\n\n    this.getLocalStorage = () => {\n      if (typeof Storage !== \"undefined\") {\n        return window.localStorage;\n      } else {\n        return null;\n      }\n    };\n\n    this.createNewInstaList = (title, listItems, persist) => {\n      var storage = this.getLocalStorage();\n\n      if (storage != null) {\n        var listId = uuidv4();\n        var creationTimestampMs = new Date().getTime();\n        var currentLists;\n        var currentListsAsString = storage.getItem(\"lists\");\n\n        if (currentListsAsString == null) {\n          currentLists = {};\n        } else {\n          currentLists = JSON.parse(currentListsAsString);\n        }\n\n        currentLists[listId] = {\n          \"title\": title,\n          \"items\": listItems,\n          \"creationTimestampMs\": creationTimestampMs,\n          \"persist\": persist\n        };\n        storage.setItem(\"lists\", JSON.stringify(currentLists));\n        return listId;\n      }\n\n      return \"\";\n    };\n\n    this.getInstaList = listId => {\n      var storage = this.getLocalStorage();\n\n      if (storage != null) {\n        var currentLists;\n        var currentListsAsString = storage.getItem(\"lists\");\n\n        if (currentListsAsString == null) {\n          currentLists = {};\n        } else {\n          currentLists = JSON.parse(currentListsAsString);\n        }\n\n        return currentLists[listId];\n      }\n\n      return {};\n    };\n  }\n\n}\n\nvar localStorageClient = new LocalStorageClient();\nexport const createNewInstaList = localStorageClient.createNewInstaList;\nexport const getInstaList = localStorageClient.getInstaList;","map":{"version":3,"sources":["/Users/kushrastogi/Projects/productivity/turbo-stacks/frontend/src/api/Storage.js"],"names":["v4","uuidv4","StorageClient","constructor","createNewInstaList","title","listItems","persist","getInstaList","listId","LocalStorageClient","getLocalStorage","Storage","window","localStorage","storage","creationTimestampMs","Date","getTime","currentLists","currentListsAsString","getItem","JSON","parse","setItem","stringify","localStorageClient"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAEA,MAAMC,aAAN,CAAoB;AACnBC,EAAAA,WAAW,GAAE,CAAE;;AACfC,EAAAA,kBAAkB,CAACC,KAAD,EAAQC,SAAR,EAAmBC,OAAnB,EAA2B,CAAE;;AAC/CC,EAAAA,YAAY,CAACC,MAAD,EAAQ,CAAE;;AAHH;;AAMpB,MAAMC,kBAAN,SAAiCR,aAAjC,CAA+C;AAAA;AAAA;;AAAA,SAC9CS,eAD8C,GAC5B,MAAM;AACvB,UAAI,OAAOC,OAAP,KAAoB,WAAxB,EAAqC;AACnC,eAAOC,MAAM,CAACC,YAAd;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACD,KAP6C;;AAAA,SAS9CV,kBAT8C,GASzB,CAACC,KAAD,EAAQC,SAAR,EAAmBC,OAAnB,KAA+B;AACnD,UAAIQ,OAAO,GAAG,KAAKJ,eAAL,EAAd;;AACA,UAAII,OAAO,IAAI,IAAf,EAAqB;AACpB,YAAIN,MAAM,GAAGR,MAAM,EAAnB;AACA,YAAIe,mBAAmB,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAA1B;AAEA,YAAIC,YAAJ;AACA,YAAIC,oBAAoB,GAAGL,OAAO,CAACM,OAAR,CAAgB,OAAhB,CAA3B;;AAEA,YAAID,oBAAoB,IAAI,IAA5B,EAAkC;AACjCD,UAAAA,YAAY,GAAG,EAAf;AACA,SAFD,MAEO;AACNA,UAAAA,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWH,oBAAX,CAAf;AACA;;AAEDD,QAAAA,YAAY,CAACV,MAAD,CAAZ,GAAuB;AAAC,mBAASJ,KAAV;AAAiB,mBAASC,SAA1B;AAAqC,iCAAuBU,mBAA5D;AAAiF,qBAAWT;AAA5F,SAAvB;AAEAQ,QAAAA,OAAO,CAACS,OAAR,CAAgB,OAAhB,EAAyBF,IAAI,CAACG,SAAL,CAAeN,YAAf,CAAzB;AAEA,eAAOV,MAAP;AACA;;AACD,aAAO,EAAP;AACA,KA/B6C;;AAAA,SAiC9CD,YAjC8C,GAiC9BC,MAAD,IAAY;AAC1B,UAAIM,OAAO,GAAG,KAAKJ,eAAL,EAAd;;AACA,UAAII,OAAO,IAAI,IAAf,EAAqB;AACpB,YAAII,YAAJ;AACA,YAAIC,oBAAoB,GAAGL,OAAO,CAACM,OAAR,CAAgB,OAAhB,CAA3B;;AAEA,YAAID,oBAAoB,IAAI,IAA5B,EAAkC;AACjCD,UAAAA,YAAY,GAAG,EAAf;AACA,SAFD,MAEO;AACNA,UAAAA,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWH,oBAAX,CAAf;AACA;;AAED,eAAOD,YAAY,CAACV,MAAD,CAAnB;AACA;;AACD,aAAO,EAAP;AACA,KAhD6C;AAAA;;AAAA;;AAmD/C,IAAIiB,kBAAkB,GAAG,IAAIhB,kBAAJ,EAAzB;AAEA,OAAO,MAAMN,kBAAkB,GAAGsB,kBAAkB,CAACtB,kBAA9C;AACP,OAAO,MAAMI,YAAY,GAAGkB,kBAAkB,CAAClB,YAAxC","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nclass StorageClient {\n\tconstructor(){}\n\tcreateNewInstaList(title, listItems, persist){}\n\tgetInstaList(listId){}\n}\n\nclass LocalStorageClient extends StorageClient {\n\tgetLocalStorage = () => {\n\t\tif (typeof(Storage) !== \"undefined\") {\n\t\t  return window.localStorage;\n\t\t} else {\n\t\t  return null;\n\t\t}\n\t}\n\n\tcreateNewInstaList = (title, listItems, persist) => {\n\t\tvar storage = this.getLocalStorage();\n\t\tif (storage != null) {\n\t\t\tvar listId = uuidv4();\n\t\t\tvar creationTimestampMs = new Date().getTime();\n\n\t\t\tvar currentLists;\n\t\t\tvar currentListsAsString = storage.getItem(\"lists\");\n\n\t\t\tif (currentListsAsString == null) {\n\t\t\t\tcurrentLists = {};\n\t\t\t} else {\n\t\t\t\tcurrentLists = JSON.parse(currentListsAsString);\n\t\t\t}\n\n\t\t\tcurrentLists[listId] = {\"title\": title, \"items\": listItems, \"creationTimestampMs\": creationTimestampMs, \"persist\": persist}\n\n\t\t\tstorage.setItem(\"lists\", JSON.stringify(currentLists));\n\n\t\t\treturn listId;\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tgetInstaList = (listId) => {\n\t\tvar storage = this.getLocalStorage();\n\t\tif (storage != null) {\n\t\t\tvar currentLists;\n\t\t\tvar currentListsAsString = storage.getItem(\"lists\");\n\n\t\t\tif (currentListsAsString == null) {\n\t\t\t\tcurrentLists = {};\n\t\t\t} else {\n\t\t\t\tcurrentLists = JSON.parse(currentListsAsString);\n\t\t\t}\n\n\t\t\treturn currentLists[listId];\n\t\t}\n\t\treturn {};\n\t}\n}\n\nvar localStorageClient = new LocalStorageClient();\n\nexport const createNewInstaList = localStorageClient.createNewInstaList;\nexport const getInstaList = localStorageClient.getInstaList;"]},"metadata":{},"sourceType":"module"}